package cs501;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.NotActiveException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Random;

public class HW2 {

	// allows for easier insertion of algorithms in the future
	public static interface ISortingAlgorithm {
		public String Name();
		public SortingAlgorithmResults Sort(int[] data);
	}
	
	
	//used to track the performance of the sorting algorithm and store the sorted list
	public static class SortingAlgorithmResults {
	    int[] sortedData;
	    int comparisons = 0;
	    int exchanges = 0;

	    @Override
	    public String toString() {
	        return "n: " + sortedData.length + ", comparisons: " + comparisons + ", exchanges: " + exchanges;
	    }
	}

	
	// returns a string containing a printable version of an array
	public static String PrintArray(int[] data) {
        String result = "[ ";

        for (int item : data) {
            result += item + ", ";
        }
        
        result += "]";

        return result;
    }
	
	
	// helper function to ensure that the list is sorted
	public static boolean IsSortedAscending(int[] data) {
		for (int i=1; i<data.length; ++i) {
			if (data[i-1] > data[i])
				return false;
		}
		return true;
	}
	
	
	// generates a random number file and saves it
	public static void GenerateRandomNumberFile(String path, int count, double min, double max) throws FileNotFoundException {
        String data = "";
        Random r = new Random();

        for (; count > 0; --count) {
            int x = (int)(min + (r.nextDouble() * (max-min)));
            data += x + " ";
        }

        PrintWriter writer = new PrintWriter(path);
        writer.print(data);
        writer.close();
    }

	
    // loads random number file into an array
    public static int[] ImportNumbersFromFile(String path) throws IOException {
        String data = ""; 
        data = String.join("", Files.readAllLines(Paths.get(path)));
        
        String[] intermediate = data.split(" ", 0);
        int[] results = new int[intermediate.length];
        
        for (int i=0; i<intermediate.length; ++i) {
            Integer value = (int)Double.parseDouble(intermediate[i]);
            results[i] = value;
        }
        
        return results;
    }
	
    
    public static class BubbleSort implements ISortingAlgorithm {
    	public String Name() { return "Bubble Sort"; }
    	
    	public SortingAlgorithmResults Sort(int[] data) {
    		int[] x = data.clone();
    		SortingAlgorithmResults results = new SortingAlgorithmResults();
    		
    		for (int i=0; i<x.length; ++i) {
    			for (int j=0; j<x.length-i-1; ++j) {
    				results.comparisons++;
    				if (x[j] > x[j+1]) {
    					results.exchanges++;
    					int temp = x[j];
    					x[j] = x[j+1];
    					x[j+1] = temp;
    				}
    			}
    		}
    		
    		results.sortedData = x;
    		return results;
    	}
    }
   

    public static class SelectionSort implements ISortingAlgorithm {
    	public String Name() { return "Selection Sort"; }
    	
		public SortingAlgorithmResults Sort(int[] data) {
			int[] x = data.clone();
			SortingAlgorithmResults results = new SortingAlgorithmResults();
			
			for (int i=0; i<x.length; ++i) {
				int minIndex = i;
				for (int j=i+1; j<x.length; ++j) {
					results.comparisons++;
					if (x[j] < x[minIndex])
						minIndex = j;
				}
				
				results.exchanges++;
				int temp = x[minIndex];
				x[minIndex] = x[i];
				x[i] = temp;
			}
			
			results.sortedData = x;
			return results;
		}
    }
	
	
    public static class InsertionSort implements ISortingAlgorithm {
    	public String Name() { return "Insertion Sort"; }
    	
		// https://www.geeksforgeeks.org/insertion-sort/
		public SortingAlgorithmResults Sort(int[] data) {
			int[] x = data.clone();
			SortingAlgorithmResults results = new SortingAlgorithmResults();
			
			for (int i=1; i<x.length; ++i) {
				int current = x[i];
				int j=i-1;
				
				for (; j>=0 && (results.comparisons++ >= 0) && x[j] > current; --j) {
					results.exchanges++;
					x[j+1] = x[j];
				}
				
				results.exchanges++;
				x[j+1] = current;
			}
			
			results.sortedData = x;
			return results;
		}
		
		public static SortingAlgorithmResults SortSegmented(int[] data, int h) {
			int[] x = data.clone();
			SortingAlgorithmResults results = new SortingAlgorithmResults();
			
			
			for (int i=h; i<x.length; ++i) {
				results.comparisons++;
				int current = x[i];
				int j=i;
				while (j>h-1 && x[j-h] > current) {
					results.exchanges++;
					x[j] = x[j-h];
					j -= h;
					
				}
				x[j] = current;
				
			}
			
			results.sortedData = x;
			return results;
		}
    }
    
    
    public static class ShellSort implements ISortingAlgorithm {
    	
    	// interface for lambda expressions
    	public static interface IDistanceFunction {
    		public int Calc(int h);
    	}
    	
    	public String Name() { return "Shell Sort"; }
    	
		public SortingAlgorithmResults Sort(int[] data) {
			return Sort(data, (h) -> h/2);
		}
		
		// overload method so we can experiment with different distance functions
		public SortingAlgorithmResults Sort(int[] data, IDistanceFunction distanceFunction) {
			int[] x = data.clone();
			SortingAlgorithmResults results = new SortingAlgorithmResults();
			
			//int distance = x.length / 2;
			int distance = distanceFunction.Calc(x.length);
			
			for (; distance > 0; distance = distanceFunction.Calc(distance)) {
				SortingAlgorithmResults temp = InsertionSort.SortSegmented(x, distance);
				
				results.comparisons += temp.comparisons;
				results.exchanges += temp.exchanges;
				results.sortedData = temp.sortedData;
			}
			
			return results;
		}
    }
    
    
    public static class QuickSort implements ISortingAlgorithm {
    	public String Name() { return "Quick Sort"; }
    	
    	SortingAlgorithmResults results = new SortingAlgorithmResults();
    	
		public SortingAlgorithmResults Sort(int[] data) {
			int[] x = data.clone();
			
			
			
		}
		
		private int Partition(int[] data, int low, int high) {
			int pivot = data[low];
			
			while (low < high) {
				
				while (pivot < data[high] && low < high)
					--high;
				
				if (high != low) {
					data[low] = data[high];
					++low;
				}
				
				while (data[low] < pivot && low < high)
					++low;
				
				if (high != low) {
					data[high] = data[low];
					--high;
				}
			}
			
			data[high] = pivot;
			int pivotPoint = high;
			
			return pivotPoint;
		}
		
		
    }
    
    
    
	
	
	public static void main(String[] args) {

		int nums = 10;
		ISortingAlgorithm[] algorithms = {
//			new BubbleSort(),
//			new SelectionSort(),
//			new InsertionSort(),
			new ShellSort(),
		};
		
        int[] best;
        int[] worst;
        int[] average;
		SortingAlgorithmResults results;
        String path;
        
        
		System.out.println("*****************************************************");
		System.out.println("Prototype versions, n = " + nums + ":");
		System.out.println("*****************************************************\n");
		
		best = new int[] {0,1,2,3,4,5,6,7,8,9};
        worst = new int[] {9,8,7,6,5,4,3,2,1,0};
        average = new int[] { 0,9,3,2,1,6,5,8,7,4 };
        
        // run the various algorithms
        for (ISortingAlgorithm algorithm : algorithms) {
        	System.out.println(algorithm.Name());
            
    		results = algorithm.Sort(best);
    		System.out.print("Best case: ");
    		System.out.println(results.toString());
    		System.out.println("\tbefore: " + PrintArray(best));
    		System.out.println("\tafter: " + PrintArray(results.sortedData));
    		  		
    		results = algorithm.Sort(worst);
    		System.out.print("Worst case: ");
    		System.out.println(results.toString());
    		System.out.println("\tbefore: " + PrintArray(worst));
    		System.out.println("\tafter: " + PrintArray(results.sortedData));
    		  		
    		results = algorithm.Sort(average);
    		System.out.print("Average case: ");
    		System.out.println(results.toString());
    		System.out.println("\tbefore: " + PrintArray(average));
    		System.out.println("\tafter: " + PrintArray(results.sortedData));
    		  		
    		System.out.println();
        }

		
		// ************************************************************************************************
		
		
		nums = 2000;
		int min = 0;
		int max = nums;
				
		System.out.println("\n\n*****************************************************");
		System.out.println("Final versions, n = " + nums + ":");
		System.out.println("*****************************************************\n");
		
		best = new int[nums];
        worst = new int[nums];
        average = new int[nums];
        
        // initialize arrays for best and worst case
		best[0] = min;
		worst[0] = max;
		for (int i=1; i<nums; ++i) {
		    best[i] = best[i-1] + 1;	// 1, 2, ... n
		    worst[i] = worst[i-1] - 1;	// n, n-1, ..., 2, 1
		}
		
		// if the random number file does not exist, create it
		path = "data/hw1_data.txt";
		if (!Files.exists(Paths.get(path))) {
		    try {
		        GenerateRandomNumberFile(path, nums, min, max);
		    } catch (Exception ex) {
		        System.out.println("Cannot generate number file");
		        return;
		    }
		}

		// load numbers from file for average case
		try {
		    average = ImportNumbersFromFile(path);
		} catch (Exception ex) {
		    System.out.println("Cannot find number file");
		    return;
		}
		
		// run the various algorithms
		for (ISortingAlgorithm algorithm : algorithms) {
        	System.out.println(algorithm.Name());
            
    		results = algorithm.Sort(best);
    		System.out.print("Best case: ");
    		System.out.println(results.toString());
    		System.out.println("\tbefore: " + PrintArray(best));
    		System.out.println("\tafter: " + PrintArray(results.sortedData));
    		  		
    		results = algorithm.Sort(worst);
    		System.out.print("Worst case: ");
    		System.out.println(results.toString());
    		System.out.println("\tbefore: " + PrintArray(worst));
    		System.out.println("\tafter: " + PrintArray(results.sortedData));
    		  		
    		results = algorithm.Sort(average);
    		System.out.print("Average case: ");
    		System.out.println(results.toString());
    		System.out.println("\tbefore: " + PrintArray(average));
    		System.out.println("\tafter: " + PrintArray(results.sortedData));
    		  		
    		System.out.println();
        }
		
		System.out.println("\n\n*****************************************************");
		System.out.println("Shell sort distance function variations :");
		System.out.println("*****************************************************\n");
		
		ShellSort ss = new ShellSort();
		
		results = ss.Sort(average, (h) -> h/2);
		if (!IsSortedAscending(results.sortedData))
			System.err.println("List was not sorted properly!");
		System.out.print("h/2: ");
		System.out.println(results.toString());
		System.out.println("\tbefore: " + PrintArray(average));
		System.out.println("\tafter: " + PrintArray(results.sortedData));
		System.out.println();
		
		results = ss.Sort(average, (h) -> h/2-1);
		if (!IsSortedAscending(results.sortedData))
			System.err.println("List was not sorted properly!");
		System.out.print("h/2-1: ");
		System.out.println(results.toString());
		System.out.println("\tbefore: " + PrintArray(average));
		System.out.println("\tafter: " + PrintArray(results.sortedData));
		System.out.println();
		
		results = ss.Sort(average, (h) -> h/3-1);
		if (!IsSortedAscending(results.sortedData))
			System.err.println("List was not sorted properly!");
		System.out.print("h/3-1: ");
		System.out.println(results.toString());
		System.out.println("\tbefore: " + PrintArray(average));
		System.out.println("\tafter: " + PrintArray(results.sortedData));
		System.out.println();
		
//		results = ss.Sort(average, (h) -> h/4-1);
//		if (!IsSortedAscending(results.sortedData))
//			System.err.println("List was not sorted properly!");
//		System.out.print("h/4-1: ");
//		System.out.println(results.toString());
//		System.out.println("\tbefore: " + PrintArray(average));
//		System.out.println("\tafter: " + PrintArray(results.sortedData));
//		System.out.println();
		
		results = ss.Sort(average, (h) -> h/5-1);
		if (!IsSortedAscending(results.sortedData))
			System.err.println("List was not sorted properly!");
		System.out.print("h/5-1: ");
		System.out.println(results.toString());
		System.out.println("\tbefore: " + PrintArray(average));
		System.out.println("\tafter: " + PrintArray(results.sortedData));
		System.out.println();
		
//		results = ss.Sort(average, (h) -> h/6-1);
//		if (!IsSortedAscending(results.sortedData))
//			System.err.println("List was not sorted properly!");
//		System.out.print("h/6-1: ");
//		System.out.println(results.toString());
//		System.out.println("\tbefore: " + PrintArray(average));
//		System.out.println("\tafter: " + PrintArray(results.sortedData));
//		System.out.println();
		
//		results = ss.Sort(average, (h) -> h/7-1);
//		if (!IsSortedAscending(results.sortedData))
//			System.err.println("List was not sorted properly!");
//		System.out.print("h/7-1: ");
//		System.out.println(results.toString());
//		System.out.println("\tbefore: " + PrintArray(average));
//		System.out.println("\tafter: " + PrintArray(results.sortedData));
//		System.out.println();
		
	}
	
}
