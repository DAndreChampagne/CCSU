package cs506.HW2;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Stream;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.converter.ArgumentConversionException;
import org.junit.jupiter.params.converter.ConvertWith;
import org.junit.jupiter.params.converter.SimpleArgumentConverter;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.MethodSource;
import org.junit.jupiter.params.provider.ValueSource;
import org.junit.runners.Parameterized.Parameters;

import tests.IntArrayConverter;

public class PrimeNumbers_Tests {

	private static String computePrimesAccurately(int n) {
		List<Integer> primes = new ArrayList<Integer>();
		int count = 1; // count of primes
		int number = 2; // number tested for primeness
		boolean isPrime; // is this number a prime

		while (count <= n) {
			isPrime = true;
			for (int divisor = 2; divisor <= number / 2; divisor++) {
				if (number % divisor == 0) {
					isPrime = false;
					break; // for loop
				}
			}
			
			//if (isPrime && (number % 10 != 0)) {
			if (isPrime && (number % 10 != 9)) { // THIS IS THE FAULT!!!
				primes.add(number);
				count++;
			}
			
			number++;
		}
		
		return primes.toString();
	}

	private static PrimeNumbers primes;
	
//	@BeforeAll
//	public static void BeforeAll() {
//		
//	}
	
//	@AfterAll
//	public static void AfterAll() {	
//	}
	
	@BeforeEach
	public void BeforeEach() {
		primes = new  PrimeNumbers();
	}
	
	@AfterEach
	public void AfterEach() {
	}
	
//	@ParameterizedTest
//	@CsvSource({
//		"2;3;5, 2, 0",
//		"1;3;5, 3, 1"
//	})
	
	@Test
	public void does_not_reach_the_fault() {
		String expected = computePrimesAccurately(0);
		String actual;
		
		primes.computePrimes(0);
		actual = primes.toString();
		
		assertEquals(expected, actual);
	}
	
	@Test
	public void reaches_the_fault_but_does_not_infect() {
		String expected = "[2, 3, 5, 7]";
		String actual;
		
		primes.computePrimes(4);
		actual = primes.toString();
		
		assertEquals(expected, actual);
	}
	
	@Test
	public void infects_the_state_but_does_not_propagate() {
		
	}
	
	@Test
	public void propagates_but_does_not_reveal() {
		
	}
	
	@Test
	public void reveals_the_fault() {
		String expected = "[2, 3, 5, 7, 11, 13, 17, 19]";
		String actual;
		
		primes.computePrimes(8);
		actual = primes.toString();
		
		assertEquals(expected, actual);
	}
	
}
