package cs501;

public class HW1_Redo {

	public static SortingAlgorithmResults BubbleSort(int[] data) {
		int[] x = data.clone();
		SortingAlgorithmResults results = new SortingAlgorithmResults();
		
		for (int i=0; i<x.length; ++i) {
			for (int j=0; j<x.length-i-1; ++j) {
				results.loops++;
				
				results.comparisons++;
				if (x[j] > x[j+1]) {
					results.exchanges++;
					int temp = x[j];
					x[j] = x[j+1];
					x[j+1] = temp;
				}
			}
		}
		
		results.results = x;
		return results;
	}
	
	public static SortingAlgorithmResults SelectionSort(int[] data) {
		int[] x = data.clone();
		SortingAlgorithmResults results = new SortingAlgorithmResults();
		
		for (int i=0; i<x.length; ++i) {
			int minIndex = i;
			for (int j=i+1; j<x.length; ++j) {
				results.loops++;
				
				results.comparisons++;
				if (x[j] < x[minIndex])
					minIndex = j;
			}
			
			results.exchanges++;
			int temp = x[minIndex];
			x[minIndex] = x[i];
			x[i] = temp;
		}
		
		results.results = x;
		return results;
	}
	
	// https://www.geeksforgeeks.org/insertion-sort/
	public static SortingAlgorithmResults InsertionSort(int[] data) {
		int[] x = data.clone();
		SortingAlgorithmResults results = new SortingAlgorithmResults();
		
		for (int i=1; i<x.length; ++i) {
			results.loops++;
			int current = x[i];
			int j=i-1;
			
			results.comparisons++;
			for (; j>=0 && x[j] > current; --j) {
				results.comparisons++;
				results.loops++;
				results.exchanges++;
				x[j+1] = x[j];
			}
			
			results.exchanges++;
			x[j+1] = current;
		}
		
		results.results = x;
		return results;
	}
	
	
	
	
	public static void main(String[] args) {

		int nums = 10;
		
        int[] best;
        int[] worst;
        int[] average;
		SortingAlgorithmResults results;
        String path;
        
		
		System.out.println("*****************************************************");
		System.out.println("Prototype versions, n = " + 10 + ":");
		System.out.println("*****************************************************\n");
		
		best = new int[] {0,1,2,3,4,5,6,7,8,9};
        worst = new int[] {9,8,7,6,5,4,3,2,1,0};
        average = new int[] { 0,9,3,2,1,6,5,8,7,4 };
		
		
        System.out.println("Bubble Sort:");
       
		results = BubbleSort(best);
		System.out.print("Best case: ");
		System.out.println(results.toString());
		System.out.println("\tbefore: " + Helpers.PrintArray(best));
		System.out.println("\tafter: " + Helpers.PrintArray(results.results));
		  		
		results = BubbleSort(worst);
		System.out.print("Worst case: ");
		System.out.println(results.toString());
		System.out.println("\tbefore: " + Helpers.PrintArray(worst));
		System.out.println("\tafter: " + Helpers.PrintArray(results.results));
		  		
		results = BubbleSort(average);
		System.out.print("Average case: ");
		System.out.println(results.toString());
		System.out.println("\tbefore: " + Helpers.PrintArray(average));
		System.out.println("\tafter: " + Helpers.PrintArray(results.results));
		  		
		System.out.println();

        
        System.out.println("Selection Sort:");
        
		results = SelectionSort(best);
		System.out.print("Best case: ");
		System.out.println(results.toString());
		System.out.println("\tbefore: " + Helpers.PrintArray(best));
		System.out.println("\tafter: " + Helpers.PrintArray(results.results));
		  		
		results = SelectionSort(worst);
		System.out.print("Worst case: ");
		System.out.println(results.toString());
		System.out.println("\tbefore: " + Helpers.PrintArray(worst));
		System.out.println("\tafter: " + Helpers.PrintArray(results.results));
		  		
		results = SelectionSort(average);
		System.out.print("Average case: ");
		System.out.println(results.toString());
		System.out.println("\tbefore: " + Helpers.PrintArray(average));
		System.out.println("\tafter: " + Helpers.PrintArray(results.results));
		  		
		System.out.println();
        
        
        System.out.println("Insertion Sort:");
        
		results = InsertionSort(best);
		System.out.print("Best case: ");
		System.out.println(results.toString());
		System.out.println("\tbefore: " + Helpers.PrintArray(best));
		System.out.println("\tafter: " + Helpers.PrintArray(results.results));
		  		
		results = InsertionSort(worst);
		System.out.print("Worst case: ");
		System.out.println(results.toString());
		System.out.println("\tbefore: " + Helpers.PrintArray(worst));
		System.out.println("\tafter: " + Helpers.PrintArray(results.results));
		  		
		results = InsertionSort(average);
		System.out.print("Average case: ");
		System.out.println(results.toString());
		System.out.println("\tbefore: " + Helpers.PrintArray(average));
		System.out.println("\tafter: " + Helpers.PrintArray(results.results));
		  		
		System.out.println();
        
	}
	
}
