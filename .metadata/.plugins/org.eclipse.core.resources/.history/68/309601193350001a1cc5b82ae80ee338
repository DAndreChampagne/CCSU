package cs506.HW2;

import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Iterator;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class HW2_PrimeNumbers_Tests {

	private static PrimeNumbers primes;
	
	
	@BeforeEach
	public void BeforeEach() {
		primes = new  PrimeNumbers();
	}
	
	@Test
	public void does_not_reach_the_fault() {
		String expected = "[]";
		String actual;
		
		// By passing 0 to the function, an empty list is returned.
		// The fault is within the while loop, and passing n=0 makes
		// sure that the fault is never reached.
		primes.computePrimes(0);
		actual = primes.toString();
		
		assertEquals(expected, actual);
	}
	
	@Test
	public void reaches_the_fault_but_does_not_infect() {
		String expected = "[2, 3, 5, 7]";
		String actual;
		
		primes.computePrimes(4);
		actual = primes.toString();
		
		assertEquals(expected, actual);
	}
	
	@Test
	public void infects_the_state_but_does_not_propagate() {
		
	}
	
	@Test
	public void propagates_but_does_not_reveal() {
		int expected = 8;
		int actual = 0;
		Iterator<Integer> iterator;
		
		primes.computePrimes(8);
		
		iterator = primes.iterator();
		
		for (; iterator.hasNext(); ++actual, iterator.next());
		
		assertEquals(expected, actual);
	}
	
	@Test
	public void reveals_the_fault() {
		String expected = "[2, 3, 5, 7, 11, 13, 17, 19]";
		String actual;
		
		primes.computePrimes(8);
		actual = primes.toString();
		
		assertEquals(expected, actual);
	}
	
}
