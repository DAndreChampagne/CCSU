package cs501.HW3;

class Node<T> {
	public T value;
	public Node<T> next;
}

interface ITraverseFunction<T> {
	void Process(Node<T> node);
}

interface ILinkedList<T> {
	Node<T> InsertFirst(Node<T> node);
	Node<T> DeleteFirst();
	int Size();
	boolean Empty();
	Node<T> Search(T key);
	void Traverse(ITraverseFunction<T> traverseFunction);
}


public class LinkedList<T> implements ILinkedList<T> {
	private Node<T> head = null;
	private int size = 0;
	
	@Override
	public Node<T> InsertFirst(Node<T> node) {
		if (head == null) {
			head = node;
		} else {
			head.next = node;
			head = node;
		}
		
		++size;
		return head;
	}
	
	@Override
	public Node<T> DeleteFirst() {
		Node<T> node = head;
		head = head.next;
		--size;
		
		return node;
	}
	
	@Override
	public final int Size() { return size; }
	
	@Override
	public boolean Empty() { return size == 0; }
	
	@Override
	public Node<T> Search(T key) {
		for (Node<T> node = head; node != null; node = node.next) {
			if (node.value.equals(key)) {
				return node;
			}
		}
		
		return null;
	}
	
	@Override
	public void Traverse(ITraverseFunction<T> traverseFunction) {
		for (Node<T> node = head; node != null; node = node.next) {
			traverseFunction.Process(node);
		}
	}
}
