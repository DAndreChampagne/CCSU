package cs506.HW2;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.converter.ArgumentConversionException;
import org.junit.jupiter.params.converter.ConvertWith;
import org.junit.jupiter.params.converter.SimpleArgumentConverter;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.MethodSource;
import org.junit.jupiter.params.provider.ValueSource;
import org.junit.runners.Parameterized.Parameters;


public class HW2_Min_Tests {

	public static class IntArrayConverter extends SimpleArgumentConverter {

	    @Override
	    protected Integer[] convert(Object source, Class<?> targetType) throws ArgumentConversionException {
	    	try {
	            String[] strings = ((String) source).split("\\s*;\\s*");
	            
	            int[] ints = Arrays.stream(strings).mapToInt(Integer::parseInt).toArray();
	            
	            // there HAS to be an easier way to do this...
	            Integer[] results = new Integer[ints.length];
	            for (int i=0; i<ints.length; ++i) {
	            	results[i] = (Integer)ints[i];
	            }
	            
	            return results;
	    	} catch (Exception ex) {
	    		throw new ArgumentConversionException(ex.getCause().getMessage());
	    	}
	    }

	}
	
	
	private List<String> list;
	
	@ParameterizedTest()
	@CsvSource({
		"1, 10;9;1",
		"1, 1;2;3",
		"15, 20;15;86",
		"10, 10;10;11;50;500"
	})
	public void IntegerTests(Integer expected, @ConvertWith(IntArrayConverter.class) Integer[] x) {
		Integer actual = Min.min(Arrays.asList(x));
		
		assertEquals(expected, actual);
	}
	
	@ParameterizedTest()
	@CsvSource({
		"1, 10;9;1",
		"1, 1;2;3",
		"15, 20;15;86",
		"10, 10;10;11;50;500"
	})
	public void StringTests(String expected, String x) {
		String[] strings = x.split("\\s*;\\s*");
		String actual = Min.min(Arrays.asList(strings));
		
		assertEquals(expected, actual);
	}
	
	
	@Test
	public void NullList() {
		list = null;
		
		assertThrows(NullPointerException.class, () -> Min.min(list));
	}
	
	@Test
	public void NullElement() {
		list = new ArrayList<>();
		
		list.add("Test");
		list.add(null);
		
		assertThrows(NullPointerException.class, () -> Min.min(list));
	}
	
	@Test
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public void MutuallyComparable() {
		List list2 = new ArrayList();
		list2.add("one");
		list2.add("two");
		list2.add(3);
		
		assertThrows(ClassCastException.class, () -> Min.min(list2));
	}
	
}
